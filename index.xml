<page>
  <p>
    An XML object model for Common Lisp.
  </p>
  <p>
    cxml-stp was written
    by <a href="mailto:david@lichteblau.com">David Lichteblau</a>
    as an add-on library for
    <a href="http://common-lisp.net/project/cxml">Closure XML</a>.
    It is available under an X11-style license.
  </p>
  <p>
    Please send bug reports
    to <a href="mailto:cxml-devel@common-lisp.net">
      cxml-devel@common-lisp.net</a>
    (<a href="http://common-lisp.net/cgi-bin/mailman/listinfo/cxml-devel">list information</a>).
  </p>

  <h3>Download and Installation</h3>

  <p>
    Download a cxml-stp
    <a href="http://www.lichteblau.com/cxml-stp/download/">tarball</a>.
  </p>
  <p>
    cxml-stp needs
    <a href="http://common-lisp.net/project/cxml">Closure XML</a>.
    <a href="http://www.cliki.net/asdf">ASDF</a> is used for
    compilation.  Register the .asd file, e.g. by symlinking it,
    then compile cxml-stp using <tt>asdf:operate</tt>.
  </p>
  <pre>$ ln -sf `pwd`/cxml-stp.asd /path/to/your/registry/
* (asdf:operate 'asdf:load-op :cxml-stp)</pre>

  <h3>Implementation-specific notes</h3>
  <p>
    At this point, cxml-stp is written to work with Lisp strings
    (as opposed to runes and rods), and is meant to be used on
    Lisp implementations with Unicode support.
  </p>

  <h3>Example</h3>
  <p>
    Use <a href="doc/pages/cxml-stp__parse-schema.html">cxml-stp:parse-schema</a>
    to parse a Relax NG schema file.  The
    resulting <a
		 href="doc/pages/cxml-stp__schema.html">schema</a>
    object is a representation of a simplified schema using Lisp
    objects, which has gone through simplification as
    described the Relax NG
    specification.  <a href="doc/pages/cxml-stp__serialize-schema.html">cxml-stp:serialize-schema</a>
    can be used to write a Relax NG file in XML syntax for this
    grammar.
  </p>
  <p>
    In order to validate XML against a schema, create a
    validation handler for the grammar
    using <a href="doc/pages/cxml-stp__make-validator.html">cxml-stp:make-validator</a>.
    The validation
    handler processes SAX events and can be used with any
    function generating such events, in particular
    with <a
	    href="http://common-lisp.net/project/cxml/sax.html#parser">cxml:parse-file</a>.
  </p>
  <pre class="code">(cxml:parse-file "example.xml"
                 <blau>(cxml-stp:make-validator
                  (cxml-stp:parse-schema #p"example.stp"))</blau>)</pre>
  <p>
    The validator accepts another SAX handler as an optional
    second argument.  For example, to parse XML into DOM while also
    validating it, use the validator like this:
  </p>
  <pre class="code" style="color: #777777">(cxml:parse-file "example.xml"
                 <blau>(cxml-stp:make-validator</blau>
                  (cxml-stp:parse-schema #p"example.stp")
                  <blau>(cxml-dom:make-dom-builder))</blau>)</pre>
  <p>
    When using the klacks parser, create a validating source.
  </p>
  <pre class="code" style="color: #777777">(klacks:with-open-source
    (s <blau>(cxml-stp:make-validating-source
        #p"example.xml"
        (cxml-stp:parse-schema #p"example.stp"))</blau>)
  (loop for key = (klacks:peek-next s) while key do (print key)))</pre>
  <p>
    DTD Compatibility processing (basically, checking of IDs and
    addition of default values) is done using a
    <a href="doc/pages/cxml-stp__make-dtd-compatibility-handler.html">DTD Compatibility handler</a>.
    You can use this handler together with a validator or by its own.
  </p>
  <pre class="code" style="color: #777777">(cxml:parse-file "example.xml"
                 <blau>(cxml-stp:make-dtd-compatibility-handler</blau>
                  (cxml-stp:parse-schema #p"example.stp")
                  <blau>(cxml-dom:make-dom-builder))</blau>)</pre>

  <h3>Documentation</h3>
  <p>
    <a href="doc/index.html">API documentation</a> is available.
  </p>
</page>
